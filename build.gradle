apply plugin: 'base'

ext.getStringProperty = { name, defaultValue ->
    if (!project.hasProperty(name)) {
        return defaultValue
    }

    def propertyValue = project.getProperty(name)
    return propertyValue != null ? propertyValue.toString().trim() : defaultValue
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def classifier
if (currentOS.isWindows()) {
    classifier = 'win'
} else if (currentOS.isLinux()) {
    classifier = 'linux'
} else if (currentOS.isMacOsX()) {
    classifier = 'mac'
}

subprojects {
    apply plugin: 'java'

    group = 'com.gluonhq.scenebuilder'
    version = getStringProperty('VERSION', '11.0.0-SNAPSHOT')

    ext.buildDateFormat = version.endsWith('-SNAPSHOT') ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'

    repositories {
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
            url "http://nexus.gluonhq.com/nexus/content/repositories/releases/"
        }

        jcenter()
        mavenCentral()
    }

    dependencies {
        //JavaFX
        compile "org.openjfx:javafx-base:11:$classifier"
        compile "org.openjfx:javafx-controls:11:$classifier"
        compile "org.openjfx:javafx-fxml:11:$classifier"
        compile "org.openjfx:javafx-graphics:11:$classifier"
        compile "org.openjfx:javafx-media:11:$classifier"
        compile "org.openjfx:javafx-swing:11:$classifier"
        compile "org.openjfx:javafx-web:11:$classifier"

        // maven dependencies
        compile 'org.eclipse.aether:aether-api:1.1.0'
        compile 'org.eclipse.aether:aether-impl:1.1.0'
        compile 'org.eclipse.aether:aether-connector-basic:1.1.0'
        compile 'org.eclipse.aether:aether-transport-file:1.1.0'
        compile 'org.eclipse.aether:aether-transport-http:1.1.0'
        compile 'org.apache.maven:maven-aether-provider:3.3.9'

        compile 'com.gluonhq:charm-glisten:5.0.0-jdk9'

        // REST API
        compile 'org.apache.httpcomponents:httpclient:4.5.2'
        compile 'javax.json:javax.json-api:1.0'
        runtime 'org.glassfish:javax.json:1.0.4'
        
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
        testCompile 'org.assertj:assertj-core:3.2.0'
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'javafx.fxml,javafx.swing,javafx.web'
            ]
            classpath = sourceSets.main.compileClasspath
        }
    }

    test {
        useJUnitPlatform()

        // -PexcludeTests="Test1,Test2"
        if (project.hasProperty('excludeTests')) {
            project.properties['excludeTests']?.replaceAll(' ', '')?.split('[,;]')?.each {
                exclude "**/${it}.class"
            }
        }
    }
}

clean {
    delete "dist"
}

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            def repoUrl = getStringProperty('publishRepositoryUrl', 'http://nexus.gluonhq.com/nexus/content/repositories/releases/');
            def repoUser = getStringProperty('publishRepositoryUser', '');
            def repoPassword = getStringProperty('publishRepositoryPassword', '');
            snapshotRepository(url: 'http://nexus.gluonhq.com/nexus/content/repositories/snapshots/') {
                authentication userName: repoUser, password: repoPassword
            }
            repository(url: repoUrl) {
                authentication(userName: repoUser, password: repoPassword);
            }
            addFilter('scenebuilder-all') { artifact, file ->
                artifact.name == 'scenebuilder-all'
            }
            addFilter('scenebuilder') { artifact, file ->
                artifact.name == 'scenebuilder'
            }
            pom('scenebuilder-all') {
                artifactId = 'scenebuilder-all'
            }
        }
    }
}
